program: sourceelements [EOF]
	   ;

sourceelements: sourceelement >sourceelements<

statement: <block>
    | <variablestatement>
	| <expressionstatement>
	| <ifstatement>
	| <iterationstatement>
	| <returnstatement>
	;

block: "{" >statementlist<? ["}"]
     ;

statementlist: statement >statementlist<?
             ;

variablestatement: "let" variabledeclarationlist
				 ;

variabledeclarationlist : variabledeclaration [","] >variabledeclarationlist<
                        | variabledeclaration
						;

variabledeclaration: identifier >initialiser<?
                   ;

initialiser: ["="] assignmentexpression
           ;

expressionstatement: expression
                   ;

ifstatement: "if" expression block ["else"] block
           | "if" expression block
		   ;

iterationstatement: whiles
                  ;

whiles: "while" expression block
      ;

returnstatement: ["return"] expression?

IDENTIFIER_NAME: "[a-zA-Z_$][a-zA-Z_0-9]*";

identifier: IDENTIFIER_NAME
          ;

literal: <booleanliteral>
       | <numericliteral>
	   | <stringliteral>
	   ;

booleanliteral: "true" | "false";

numericliteral: <INTEGERLITERAL>
              | <DECIMALLITERAL>
			  ;

INTEGERLITERAL: "-?0|[1-9][0-9]*";
DECIMALLITERAL: "(((0|[1-9][0-9]*)(\.[0-9]*)?)|(\.[0-9]+))([eE][\+\-]?[0-9]*)?"
              ;
stringliteral: <SINGLESTRING>
             | <DOUBLESTRING>
			 ;

SINGLESTRING: "'([^'\\]|\\.)*'";
DOUBLESTRING: "\"([^\"\\]|\\.)*\"";

primaryexpression: "self"
                 | <identifier>
				 | <literal>
				 | "(" <expression> ")"
				 ;

functiondeclaration: ["fn"] identifier "(" formalparameterlist? ")" ["{"] functionbody? "}";

functionexpression: ["fn"] identifier? "(" formalparameterlist? ")" ["{"]
functionbody? "}";

formalparameterlist: identifier [","] >formalparameterlist<
                   | identifier
				   ;

functionbody: sourceelements;

memberexpression: primaryexpression >memberexpressiona<+
                | functionexpression >memberexpressiona<+
				| <primaryexpression>
				| <functionexpression>
				;

memberexpressiona: "." identifier
				 ;

callexpression: memberexpression arguments >callexpressiona<*;

callexpressiona: arguments
               | "." identifier
			   ;

arguments: "(" [")"]
       	 | "(" >argumentlist< [")"]
		 ;

argumentlist: assignmentexpression [","] >argumentlist<
            | assignmentexpression
			;

lhsexpression: <callexpression>
			 ;

postfixexpression: lhsexpression "++"
                 | lhsexpression "--"
				 | <lhsexpression>
				 ;

