IGNORE: "([ \f\t\n\r\v]*)|(//[^\n]*\n)|(/\*([^\*]|\*[^/])*\*?\*/)";
IDENTIFIER  : "[a-zA-Z_$][a-zA-Z_0-9]*";
INTEGERLITERAL: "-?0|[1-9][0-9]*";
FLOATLITERAL: "(((0|[1-9][0-9]*)(\.[0-9]*)?)|(\.[0-9]+))([eE][\+\-]?[0-9]*)?";
HEXINTEGERLITERAL: "0[xX][0-9a-fA-F]+";
OCTALINTEGERLITERAL: "0[oO][0-7]+";
BINARYINTEGERLITERAL: "0[bB][0-1]+";
SINGLESTRING: "'([^'\\]|\\.)*'";
DOUBLESTRING    : "\"([^\"\\]|\\.)*\"";

program: stmt* [EOF]
       ;

stmt: "if" "(" stmt ")" "{" stmt* "}"
    | "while" "(" stmt ")" "{" stmt* "}"
    | "print" stmt
	| "fn" "(" [paramlist]? ")" "{" stmt* "}"
	| identifier "=" stmt
	| identifier "(" [arglist]? ")"
	| "return" stmt
    | bool
    ;

paramlist: (identifier ",")* (identifier [","]?);

arglist: (stmt ",")* (stmt [","]?);

identifier: IDENTIFIER;

bool: join ["or" bool]+
    | join
	;

join: equality ["and" join]+
	| equality
    ;

equalityoperator: "is" | "==" | "!=";
equality: relation [equalityoperator equality]+
		| relation
		;

relation: expr "<" expr
        | expr ">" expr
		| expr "<=" expr
		| expr ">=" expr
		| expr;

additionoperator: "-" | "+";
expr: term [additionoperator expr]+
	| term
	;

multiplicativeoperator: "/" | "*";
term: unary [multiplicativeoperator term]+
	| unary
	;
unaryoperator: "not" | "!" | "-";
unary: unaryoperator unary
	 | factor;

factor: "(" bool ")" | atom;

atom: booleanliteral
    | numericliteral
    | stringliteral
    | identifier
    ;

booleanliteral: "true"
              | "false"
              ;

numericliteral: FLOATLITERAL
              | INTEGERLITERAL
              ;

stringliteral: SINGLESTRING
             | DOUBLESTRING
             ;
